consumes:
- application/json
definitions:
  ApiClient:
    $ref: ../models/FA2.1/api-client.yaml
  Connection:
    $ref: ../models/FA2.1/connection.yaml
  Host:
    $ref: ../models/FA2.1/host.yaml
  HostGroup:
    $ref: ../models/FA2.0/host-group.yaml
  HostGroupPerformance:
    $ref: ../models/FA2.0/resource-performance.yaml
  HostGroupPerformanceByArray:
    $ref: ../models/FA2.0/resource-performance-by-array.yaml
  HostGroupSpace:
    $ref: ../models/FA2.0/resource-space-no-id.yaml
  HostPerformance:
    $ref: ../models/FA2.0/resource-performance.yaml
  HostPerformanceByArray:
    $ref: ../models/FA2.0/resource-performance-by-array.yaml
  HostSpace:
    $ref: ../models/FA2.0/resource-space-no-id.yaml
  Member:
    $ref: ../models/FA2.0/member.yaml
  MemberNoIdAll:
    $ref: ../models/FA2.0/member-no-id-all.yaml
  MemberNoIdGroup:
    $ref: ../models/FA2.1/member-no-id-group.yaml
  Offload:
    $ref: ../models/FA2.1/offload.yaml
  Pod:
    $ref: ../models/FA2.1/pod.yaml
  PodPerformance:
    $ref: ../models/FA2.0/resource-performance.yaml
  PodPerformanceByArray:
    $ref: ../models/FA2.0/resource-performance-by-array.yaml
  PodSpace:
    $ref: ../models/FA2.0/resource-space.yaml
  ProtectionGroup:
    $ref: ../models/FA2.1/protection-group.yaml
  ProtectionGroupPerformance:
    $ref: ../models/FA2.1/protection-group-performance.yaml
  ProtectionGroupPerformanceByArray:
    $ref: ../models/FA2.1/protection-group-performance-array.yaml
  ProtectionGroupSnapshot:
    $ref: ../models/FA2.1/protection-group-snapshot.yaml
  ProtectionGroupSpace:
    $ref: ../models/FA2.0/resource-space-no-id.yaml
  ProtectionGroupTarget:
    $ref: ../models/FA2.1/protection-group-target.yaml
  RemoteProtectionGroup:
    $ref: ../models/FA2.1/remote-protection-group.yaml
  RemoteProtectionGroupSnapshot:
    $ref: ../models/FA2.1/remote-protection-group-snapshot.yaml
  RemoteProtectionGroupSnapshotTransfer:
    $ref: ../models/FA2.1/remote-protection-group-snapshot-transfer.yaml
  RemoteVolumeSnapshot:
    $ref: ../models/FA2.1/remote-volume-snapshot.yaml
  RemoteVolumeSnapshotTransfer:
    $ref: ../models/FA2.1/remote-volume-snapshot-transfer.yaml
  Username:
    $ref: ../models/FA2.0/username.yaml
  Volume:
    $ref: ../models/FA2.0/volume.yaml
  VolumeGroup:
    $ref: ../models/FA2.1/volume-group.yaml
  VolumeGroupPerformance:
    $ref: ../models/FA2.1/volume-group-performance.yaml
  VolumeGroupSpace:
    $ref: ../models/FA2.0/resource-space.yaml
  VolumePerformance:
    $ref: ../models/FA2.0/volume-performance.yaml
  VolumePerformanceByArray:
    $ref: ../models/FA2.0/resource-performance-by-array.yaml
  VolumeSnapshot:
    $ref: ../models/FA2.0/volume-snapshot.yaml
  VolumeSnapshotTransfer:
    $ref: ../models/FA2.1/volume-snapshot-transfer.yaml
  VolumeSpace:
    $ref: ../models/FA2.0/resource-space.yaml
info:
  description: "## Pure Swagger UI for FlashArray\nA light weight tool to explore\
    \ the API for FlashArray, community supported. \nFor  help with this tool, use\
    \ [Pure1 Community](https://community.purestorage.com/) or the [code-purestorage\
    \ Slack](https://community.purestorage.com/discussion/9561/join-the-new-pure-code-slack-team-for-api-and-extensibility-discussions)\n\
    \n## Authenticate using API Token\nTo get an API Key, you can do POST /auth/apitoken\
    \ with your user/pass using the 1.x API, then use your API key with POST /login.\
    \  The array returns \na header  with the name \"x-auth-token\".  This swagger\
    \ UI tool, translates that into a cookie so the webbrowser will send on subsequent\
    \ calls.  This Swagger UI tool then\ntranslates that cookie back into a header\
    \ when making the API request to the array.\n\n## Authenticate using OAuth\n###\
    \ Manually generate an id_token \n\n### \n\nIntro to how OAuth2 works with the\
    \ 2.0 version: [Intro](https://support.purestorage.com/FlashArray/PurityFA/Purity_FA_REST_API/Reference/REST_API_2.0_Authentication_Guide)"
  title: FlashArray REST API
  version: '2.1'
  x-logo:
    altText: Pure Storage logo
    backgroundColor: '#ffffff'
    url:
      $ref: ../redoc/PS-LogoBase64-FA.txt
paths:
  /api/2.1/api-clients:
    $ref: ../paths/FA2.1/api-clients.path.yaml
  /api/2.1/connections:
    $ref: ../paths/FA2.1/connections.path.yaml
  /api/2.1/host-groups:
    $ref: ../paths/FA2.1/host-groups.path.yaml
  /api/2.1/host-groups/hosts:
    $ref: ../paths/FA2.1/host-groups-hosts-members.path.yaml
  /api/2.1/host-groups/performance:
    $ref: ../paths/FA2.1/host-groups-performance.path.yaml
  /api/2.1/host-groups/performance/by-array:
    $ref: ../paths/FA2.1/host-groups-performance-by-array.path.yaml
  /api/2.1/host-groups/protection-groups:
    $ref: ../paths/FA2.1/host-groups-protection-groups-members.path.yaml
  /api/2.1/host-groups/space:
    $ref: ../paths/FA2.1/host-groups-space.path.yaml
  /api/2.1/hosts:
    $ref: ../paths/FA2.1/hosts.path.yaml
  /api/2.1/hosts/host-groups:
    $ref: ../paths/FA2.1/hosts-host-groups-members.path.yaml
  /api/2.1/hosts/performance:
    $ref: ../paths/FA2.1/hosts-performance.path.yaml
  /api/2.1/hosts/performance/by-array:
    $ref: ../paths/FA2.1/hosts-performance-by-array.path.yaml
  /api/2.1/hosts/protection-groups:
    $ref: ../paths/FA2.1/hosts-protection-groups-members.path.yaml
  /api/2.1/hosts/space:
    $ref: ../paths/FA2.1/hosts-space.path.yaml
  /api/2.1/login:
    $ref: ../paths/FA2.0/login.path.yaml
  /api/2.1/logout:
    $ref: ../paths/FA2.0/logout.path.yaml
  /api/2.1/offloads:
    $ref: ../paths/FA2.1/offloads.path.yaml
  /api/2.1/pods:
    $ref: ../paths/FA2.1/pods.path.yaml
  /api/2.1/pods/arrays:
    $ref: ../paths/FA2.1/pods-arrays-members.path.yaml
  /api/2.1/pods/performance:
    $ref: ../paths/FA2.1/pods-performance.path.yaml
  /api/2.1/pods/performance/by-array:
    $ref: ../paths/FA2.1/pods-performance-by-array.path.yaml
  /api/2.1/pods/space:
    $ref: ../paths/FA2.1/pods-space.path.yaml
  /api/2.1/protection-group-snapshots:
    $ref: ../paths/FA2.1/protection-group-snapshots.path.yaml
  /api/2.1/protection-group-snapshots/transfer:
    $ref: ../paths/FA2.1/protection-group-snapshots-transfer.path.yaml
  /api/2.1/protection-groups:
    $ref: ../paths/FA2.1/protection-groups.path.yaml
  /api/2.1/protection-groups/host-groups:
    $ref: ../paths/FA2.1/protection-groups-host-groups-members.path.yaml
  /api/2.1/protection-groups/hosts:
    $ref: ../paths/FA2.1/protection-groups-hosts-members.path.yaml
  /api/2.1/protection-groups/performance/replication:
    $ref: ../paths/FA2.1/protection-groups-performance-replication.path.yaml
  /api/2.1/protection-groups/performance/replication/by-array:
    $ref: ../paths/FA2.1/protection-groups-performance-replication-by-array.path.yaml
  /api/2.1/protection-groups/space:
    $ref: ../paths/FA2.1/protection-groups-space.path.yaml
  /api/2.1/protection-groups/targets:
    $ref: ../paths/FA2.1/protection-groups-targets.path.yaml
  /api/2.1/protection-groups/volumes:
    $ref: ../paths/FA2.1/protection-groups-volumes-members.path.yaml
  /api/2.1/remote-pods:
    $ref: ../paths/FA2.1/remote-pods.path.yaml
  /api/2.1/remote-protection-group-snapshots:
    $ref: ../paths/FA2.1/remote-protection-group-snapshots.path.yaml
  /api/2.1/remote-protection-group-snapshots/transfer:
    $ref: ../paths/FA2.1/remote-protection-group-snapshots-transfer.path.yaml
  /api/2.1/remote-protection-groups:
    $ref: ../paths/FA2.1/remote-protection-groups.path.yaml
  /api/2.1/remote-volume-snapshots:
    $ref: ../paths/FA2.1/remote-volume-snapshots.path.yaml
  /api/2.1/remote-volume-snapshots/transfer:
    $ref: ../paths/FA2.1/remote-volume-snapshots-transfer.path.yaml
  /api/2.1/volume-groups:
    $ref: ../paths/FA2.1/volume-groups.path.yaml
  /api/2.1/volume-groups/performance:
    $ref: ../paths/FA2.1/volume-groups-performance.path.yaml
  /api/2.1/volume-groups/space:
    $ref: ../paths/FA2.1/volume-groups-space.path.yaml
  /api/2.1/volume-groups/volumes:
    $ref: ../paths/FA2.1/volume-groups-volumes-members.path.yaml
  /api/2.1/volume-snapshots:
    $ref: ../paths/FA2.1/volume-snapshots.path.yaml
  /api/2.1/volume-snapshots/transfer:
    $ref: ../paths/FA2.1/volume-snapshots-transfer.path.yaml
  /api/2.1/volumes:
    $ref: ../paths/FA2.1/volumes.path.yaml
  /api/2.1/volumes/performance:
    $ref: ../paths/FA2.1/volumes-performance.path.yaml
  /api/2.1/volumes/performance/by-array:
    $ref: ../paths/FA2.1/volumes-performance-by-array.path.yaml
  /api/2.1/volumes/protection-groups:
    $ref: ../paths/FA2.1/volumes-protection-groups-members.path.yaml
  /api/2.1/volumes/space:
    $ref: ../paths/FA2.1/volumes-space.path.yaml
  /api/2.1/volumes/volume-groups:
    $ref: ../paths/FA2.1/volumes-volume-groups-members.path.yaml
  /api/api_version:
    $ref: ../paths/FA2.0/api_version.path.yaml
  /oauth2/1.0/token:
    $ref: ../paths/TEx-v2/oauth-token.path.yaml
  /oauth2_pub_priv_key_pair:
    get:
      description: "Returns a public and private key pair, This is not part of the\
        \ FlashArray API, \nit's a helper endpoint making it easier to generate an\
        \ oauth2 token_id in this Swagger UI. \nThey keys are generated in the Docker\
        \ container running on this machine.\n\nRecommend to NOT use this API but\
        \ to use OpenSSL instead for production use cases:\n  You can generate a public\
        \ and private RSA key pair like this:\n\n    openssl genrsa -des3 -out private.pem\
        \ 2048\n    \n    That generates a 2048-bit RSA key pair, encrypts them with\
        \ a password you provide and writes them to a file. \n    You need to next\
        \ extract the public key file. You will use this, for instance, on your web\
        \ server to encrypt \n    content so that it can only be read with the private\
        \ key.\n    \n    Export the RSA Public Key to a File\n    This is a command\
        \ that is\n    \n    openssl rsa -in private.pem -outform PEM -pubout -out\
        \ public.pem"
      responses:
        200:
          description: Token Generated
          schema:
            properties:
              private_key:
                description: Private key in PEM format.
                type: string
              public_key:
                description: Public key in PEM format.
                type: string
            type: object
      tags:
      - Auth Helpers
  /oauth2_token_from_private_key:
    post:
      consumes:
      - text/plain
      description: "Authenticates to Flasharray, This returns a token_id (think session\
        \ id), from an existing API Client, \nThis is not part of the FlashArray API,\
        \ it's a helper endpoint making it easy to generate an \noauth2 token_id in\
        \ this Swagger UI.  The private key is being passed into the Docker container\
        \ in\norder to sign the JWT token.  Take a look at the Docker container output\
        \ to see more details \nof what is happening.\n\nCopy the output value, Authorization\
        \ header, and then click on the green Authorize button at the \ntop of the\
        \ page.  Paste in the value into "
      parameters:
      - description: Issuer value displayed in the FlashArray API Registration page
          or pureapiclient list ) by default it's the same name as API Client
        in: header
        name: issuer_name
        type: string
      - description: Client Id value displayed in the FlashArray API Registration
          page or pureapiclient list
        in: header
        name: client_id
        type: string
      - description: Key Id value displayed in the FlashArray API Registration page
          or pureapiclient list
        in: header
        name: key_id
        type: string
      - description: The name of a valid user on the FlashArray that will be authenticated
          to.
        in: header
        name: username
        type: string
      - description: Private key in PEM format that was used to create the Public
          key for this API Client specified as the issuer in this call.
        in: body
        name: private_key
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        200:
          description: Token Generated
          schema:
            example:
              username: pureuser
            properties:
              Authorization:
                description: An OAuth bearer token to be used in the Authorization
                  header for authorization to API endpoints.
                type: string
              description:
                desciption: How to use token
                type: string
            type: object
      tags:
      - Auth Helpers
produces:
- application/json
security:
- OAuth2-Bearer-Token: []
- X-Auth-Token: []
securityDefinitions:
  OAuth2-Bearer-Token:
    in: header
    name: Authorization
    type: apiKey
  X-Auth-Token:
    in: header
    name: x-auth-token
    type: apiKey
swagger: '2.0'
tags:
- description: A set of endpoints not in the Purity API, but to make OAuth using this
    tool simple and easy to understand.
  name: Auth Helpers
- description: Pure Storage uses the OAuth 2.0 Token Exchange authorization grant
    and JSON Web Tokens (JWTs) to authenticate to the Pure Storage REST API. Before
    you can exchange the ID Token for an access token, create and enable the API client
    to generate the `key_id`, `id`, and `issuer` values. These values will be used
    as JWT claims for the `subject_token` parameter.
  name: Authorization
- description: An API client represents an identity type. API clients are created
    on the array. To create an API client, register and then enable it on the array.
    After the API client has been created, the user name (`sub`) and identity tokens
    (`kid` and `aud` tokens) that are issued by the API client are used as claims
    for the JSON Web Token that you create to authenticate into the REST API.
  name: API Clients
- description: A connection gives hosts access to volumes on the array. The system
    supports private (host-volume) connections and public (host group-volume) connections.
    A private connection connects one volume to one host. Private connections are
    typically used for boot volumes and for stand-alone (non-clustered) host applications.
    A shared connection connects a designated set of hosts (via a host group) to a
    designated set of volumes, providing the hosts with a consistent "view" of the
    volumes. All associated hosts use the same LUN to address a given associated volume.
    All hosts and volumes associated with a host group are automatically connected
    to each other by virtue of their associations with the group. Shared connections
    are useful for cluster applications in which several related hosts require consistent
    (same LUN) connectivity to a set of storage volumes.
  name: Connections
- description: Host groups implement consistent connections between a set of hosts
    and one or more volumes. Connections are consistent in the sense that all hosts
    associated with a host group address a volume connected to the group by the same
    LUN. Host groups are typically used to provide a common view of storage volumes
    to the hosts in a clustered application.
  name: Host Groups
- description: Hosts organize the storage network addresses (iSCSI Qualified Names,
    NVMe qualified names, or Fibre Channel world wide names) of client computers to
    identify the host's intiators. Hosts also control communications between clients
    and volumes. After a volume has been created, establish a host-volume connection
    so that the host can read data from and write data to the volume.
  name: Hosts
- description: The offload feature enables system administrators to replicate point-in-time
    volume snapshots from the array to an external storage system for long-term retention.
    Each offload target represents an external storage system, such as an Azure Blob
    container, NFS device, or S3 bucket, to where Purity//FA volume snapshots can
    be replicated.
  name: Offloads
- description: Synchronous replication is managed through pods. A pod representing
    a collection of protection groups and volumes is created on one array and stretched
    to another array, resulting in fully synchronized writes between the two arrays.
    A pod can contain a mix of volumes, and protection groups with member volumes.
    Writes to the pod coming into either array are immediately synchronized and seen
    on both arrays.
  name: Pods
- description: A protection group defines a set of volumes, hosts, or host groups
    (called members) that are protected together through snapshots with point-in-time
    consistency across the member volumes. The members within the protection group
    have common data protection requirements and the same snapshot, replication, and
    retention schedules. Protection group members include volumes, hosts, and host
    groups. After a protection group has been created, configure the protection group
    schedule to generate and replicate snapshots to another array or to an external
    storage system.
  name: Protection Groups
- description: Protection group snapshots capture the content of all volumes on the
    source array for the specified protection group at a single point in time. The
    snapshot is an immutable image of the volume data at that instance in time. The
    volumes are either direct members of the protection group or connected to any
    of its hosts or host groups within a protection group. Volumes are protected through
    protection group snapshots that are retained locally, replicated to other arrays
    or storage systems, or both. Protection group snapshots can be manually generated
    on demand or enabled to automatically generate at scheduled intervals. After a
    protection group snapshot has been taken, it is either stored on the local array
    or replicated over to a remote (target) array.
  name: Protection Group Snapshots
- description: A remote pod represents a pod that is on a connected array but not
    stretched to this array.
  name: Remote Pods
- description: A remote protection group represents a protection group that resides
    on an offload target with the source side of the remote protection group being
    another array that is connected to the local array. The local array can only see
    the remote protection groups of other arrays if the two arrays are connected.
  name: Remote Protection Groups
- description: A remote protection group snapshot represents a protection group snapshot
    that resides on an offload target with the source side of the remote protection
    group snapshot being another array that is connected to the local array. The local
    array can only see the remote protection group snapshots of other arrays if the
    two arrays are connected.
  name: Remote Protection Group Snapshots
- description: A remote volume snapshot represents a volume snapshot that resides
    on an offload target with the source side of the remote volume snapshot being
    another array that is connected to the local array. The local array can only see
    the remote volume snapshots of other arrays if the two arrays are connected.
  name: Remote Volume Snapshots
- description: A volume represents a container that manages the storage space on the
    array. After a volume has been created, establish a host-volume connection so
    that the host can read data from and write data to the volume. Furthermore, protect
    the volume data through asynchronous replication to a remote array, synchronous
    replication between remote arrays, and replication to external storage systems.
  name: Volumes
- description: Volume groups organize volumes into logical groupings. If virtual volumes
    are configured, each volume group on the FlashArray array represents its associated
    virtual machine, and inside each of those volumes groups are the FlashArray volumes
    that are assigned to the virtual machine. Volume groups that are associated with
    virtual machines have names that begin with `vvol-` and end with the virtual machine
    name.
  name: Volume Groups
- description: Volume snapshots are immutable, point-in-time images of the contents
    of one or more volumes. There are two types of volume snapshots&#58; volume snapshots
    and protection group volume snapshots. A volume snapshot is a snapshot that captures
    the contents of a single volume. A protection group volume snapshot is a volume
    snapshot that is created from a group of volumes that are part of the same protection
    group. All of the volume snapshots created from a protection group snapshot are
    point-in-time consistent with each other.
  name: Volume Snapshots
