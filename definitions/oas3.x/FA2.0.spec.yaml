openapi: 3.0.1
info:
  title: FlashArray REST API
  version: "2.0"
  x-logo:
    url:
      $ref: ../redoc/PS-LogoBase64-FA.txt
    backgroundColor: "#ffffff"
    altText: Pure Storage logo
servers:
- url: "https://[array]/"
tags:
- name: Authorization
  description: |
    Pure Storage uses the OAuth 2.0 Token Exchange authorization grant and JSON Web Tokens (JWTs)
    to authenticate to the Pure Storage REST API.
    Before you can exchange the ID Token for an access token, create and enable the API client
    to generate the `key_id`, `id`, and `issuer` values.
    These values will be used as JWT claims for the `subject_token` parameter.
- name: Connections
  description: |
    A connection gives hosts access to volumes on the array.
    The system supports private (host-volume) connections
    and public (host group-volume) connections.
    A private connection connects one volume to one host.
    Private connections are typically used for boot volumes
    and for stand-alone (non-clustered) host applications.
    A shared connection connects a designated set of hosts (via a host group)
    to a designated set of volumes, providing the hosts with a consistent "view" of the volumes.
    All associated hosts use the same LUN to address a given associated volume.
    All hosts and volumes associated with a host group are
    automatically connected to each other by virtue of their associations with the group.
    Shared connections are useful for cluster applications in which several related hosts require
    consistent (same LUN) connectivity to a set of storage volumes.
- name: Host Groups
  description: |
    Host groups implement consistent connections between a set of hosts and one or more volumes.
    Connections are consistent in the sense that all hosts associated with a host group
    address a volume connected to the group by the same LUN. Host groups are typically
    used to provide a common view of storage volumes to the hosts in a clustered application.
- name: Hosts
  description: |
    Hosts organize the storage network addresses
    (iSCSI Qualified Names, NVMe qualified names, or Fibre Channel world wide names)
    of client computers to identify the host's intiators.
    Hosts also control communications between clients and volumes.
    After a volume has been created,
    establish a host-volume connection so that the host
    can read data from and write data to the volume.
- name: Volumes
  description: |
    A volume represents a container that manages the storage space on the array.
    After a volume has been created, establish a host-volume connection so that the host
    can read data from and write data to the volume.
    Furthermore, protect the volume data through asynchronous replication to a remote array,
    synchronous replication between remote arrays, and replication to external storage systems.
- name: Volume Snapshots
  description: |
    Volume snapshots are immutable, point-in-time images of the contents of one or more volumes.
    There are two types of volume snapshots&#58;
    volume snapshots and protection group volume snapshots.
    A volume snapshot is a snapshot that captures the contents of a single volume.
    A protection group volume snapshot is a volume snapshot that is created from a group of
    volumes that are part of the same protection group. All of the volume snapshots created from a
    protection group snapshot are point-in-time consistent with each other.
paths:
  /oauth2/1.0/token:
    post:
      tags:
      - Authorization
      summary: Get access token
      description: |
        Exchanges an ID Token for an OAuth 2.0 access token.
      parameters:
      - $ref: '#/components/parameters/XRequestId'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - grant_type
              - subject_token
              - subject_token_type
              type: object
              properties:
                grant_type:
                  $ref: '#/components/schemas/OauthGrantType'
                subject_token:
                  $ref: '#/components/schemas/OauthSubjectToken'
                subject_token_type:
                  $ref: '#/components/schemas/OauthSubjectTokenType'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/OauthToken200'
        "400":
          $ref: '#/components/responses/OauthToken400'
        "401":
          $ref: '#/components/responses/OauthToken401'
      security: []
  /api/api_version:
    get:
      tags:
      - Authorization
      summary: List available API versions
      description: |
        Returns a list of available API versions. No authentication is required to access this endpoint.
      parameters:
      - $ref: '#/components/parameters/XRequestId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api_versionResponse'
      security: []
  /api/2.0/connections:
    get:
      tags:
      - Connections
      summary: List volume connections
      description: |+
        Return a list of connections between a volume and its hosts and host groups,
        and the LUNs used by the associated hosts to address these volumes.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Host_group_names'
      - $ref: '#/components/parameters/Host_names'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Protocol_endpoint_names'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Volume_names'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionGetResponse'
    post:
      tags:
      - Connections
      summary: Create a connection between a volume and host or host group
      description: |+
        Create a connection between a volume and a host or host group.
        The `volume_names` and `host_names` or `host_group_names` query parameters are required.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Host_group_names'
      - $ref: '#/components/parameters/Host_names'
      - $ref: '#/components/parameters/Volume_names'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionPost'
        required: false
        x-codegen-request-body-name: connection
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionResponse'
      x-codegen-request-body-name: connection
    delete:
      tags:
      - Connections
      summary: Break a connection between a volume and its host or host group
      description: |
        Break the connection between a volume and its associated host
        or host group.
        The `volume_names` and `host_names` or `host_group_names` query parameters are required.
      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Host_group_names'
      - $ref: '#/components/parameters/Host_names'
      - $ref: '#/components/parameters/Volume_names'
      responses:
        "200":
          description: OK
          content: {}
  /api/2.0/host-groups:
    get:
      tags:
      - Host Groups
      summary: List host groups
      description: |+
        Return a list of host groups.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Total_item_count'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostGroupGetResponse'
    post:
      tags:
      - Host Groups
      summary: Create a host group
      description: |+
        Create a host group.
        The `names` query parameter is required.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Names'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostGroupResponse'
    delete:
      tags:
      - Host Groups
      summary: Delete a host group
      description: |+
        Delete a host group.
        The `names` query parameter is required.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Names'
      responses:
        "200":
          description: OK
          content: {}
    patch:
      tags:
      - Host Groups
      summary: Manage a host group
      description: |+
        Manage a host group.
        The `names` query parameter is required.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Names'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostGroupPatch'
        required: true
        x-codegen-request-body-name: host-group
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostGroupResponse'
      x-codegen-request-body-name: host-group
  /api/2.0/host-groups/hosts:
    get:
      tags:
      - Host Groups
      summary: List host groups associated with hosts
      description: |+
        Returns a list of host groups that are associated with hosts.


      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Group_names'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Member_names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Total_item_count'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberNoIdAllGetResponse'
  /api/2.0/host-groups/performance:
    get:
      tags:
      - Host Groups
      summary: List host group performance data
      description: |+
        Return real-time and historical performance data,
        real-time latency data, and
        average I/O sizes across all volumes,
        displayed both by host group
        and as a total across all host groups.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Total_only'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePerformanceNoIdGetResponse'
  /api/2.0/host-groups/performance/by-array:
    get:
      tags:
      - Host Groups
      summary: List host group performance data by array
      description: |
        Return real-time and historical performance data, real-time latency data,
        and average I/O size data.
        The data returned is for each volume that is connected to a host group on the current array and
        for each volume that is connected to a host group on any remote arrays
        that are visible to the current array.
        The data is displayed as a total across all host groups on each array and
        by individual host group.
      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Total_only'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePerformanceNoIdByArrayGetResponse'
  /api/2.0/hosts:
    get:
      tags:
      - Hosts
      summary: List hosts
      description: |+
        Returns a list of hosts.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Total_item_count'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostGetResponse'
    post:
      tags:
      - Hosts
      summary: Create a host
      description: |+
        Creates a host.
        The `names` query parameter is required.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Names'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostPost'
        required: true
        x-codegen-request-body-name: host
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResponse'
      x-codegen-request-body-name: host
    delete:
      tags:
      - Hosts
      summary: Delete a host
      description: |+
        Deletes an existing host. All volumes that are connected to the host,
        either through private or shared connections,
        must be disconnected from the host before the host can be deleted.
        The `names` query parameter is required.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Names'
      responses:
        "200":
          description: OK
          content: {}
    patch:
      tags:
      - Hosts
      summary: Manage a host
      description: |+
        Manages an existing host, including its storage network addresses, CHAP, host personality, and
        preferred arrays, or associate a host to a host group.
        The `names` query parameter is required.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Names'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostPatch'
        required: true
        x-codegen-request-body-name: host
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResponse'
      x-codegen-request-body-name: host
  /api/2.0/hosts/host-groups:
    get:
      tags:
      - Hosts
      summary: List hosts associated with host groups
      description: |+
        Returns a list of hosts that are associated with host groups.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Group_names'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Member_names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Total_item_count'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberNoIdAllGetResponse'
  /api/2.0/hosts/performance:
    get:
      tags:
      - Hosts
      summary: List host performance data
      description: |+
        Return real-time and historical performance data,
        real-time latency data, and
        average I/O sizes across all volumes,
        displayed both by host
        and as a total across all hosts.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Total_only'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePerformanceNoIdGetResponse'
  /api/2.0/hosts/performance/by-array:
    get:
      tags:
      - Hosts
      summary: List host performance data by array
      description: |+
        Return real-time and historical performance data, real-time latency data,
        and average I/O size data.
        The data returned is for each volume that is connected to a host on the current array and
        for each volume that is connected to a host on any remote arrays
        that are visible to the current array.
        The data is displayed as a total across all hosts on each array and by individual host.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Total_only'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePerformanceNoIdByArrayGetResponse'
  /api/2.0/login:
    post:
      tags:
      - Authorization
      summary: POST login (placeholder)
      description: |
        Exchange an API token for a session token.
      parameters:
      - name: api-token
        in: header
        description: |
          API token for a user.
        schema:
          type: string
        example: 0f2e2884-9486-c6c2-438c-f50418f2aac3
      - $ref: '#/components/parameters/XRequestId'
      responses:
        "200":
          description: OK
          headers:
            x-auth-token:
              description: Session token for a user.
              schema:
                type: string
                example: 3be3d489-55c6-4643-90ac-a476dbc98812
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResponse'
  /api/2.0/logout:
    post:
      tags:
      - Authorization
      summary: POST logout (placeholder)
      description: |
        Invalidate a session token.
      parameters:
      - name: x-auth-token
        in: header
        description: Session token for a user.
        schema:
          type: string
        example: 3be3d489-55c6-4643-90ac-a476dbc98812
      - $ref: '#/components/parameters/XRequestId'
      responses:
        "200":
          description: OK
          content: {}
  /api/2.0/volumes:
    get:
      tags:
      - Volumes
      summary: List volumes
      description: |+
        Return a list of volumes, including those pending eradication.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Destroyed'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Ids'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Total_only'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeGetResponse'
    post:
      tags:
      - Volumes
      summary: Create a volume
      description: |+
        Create one or more virtual storage volumes of the specified size.
        If `provisioned` is not specified, the size of the new volume defaults to 1 MB in size.
        The `names` query parameter is required.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Overwrite'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolumePost'
        required: true
        x-codegen-request-body-name: volume
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeResponse'
      x-codegen-request-body-name: volume
    delete:
      tags:
      - Volumes
      summary: Eradicate a volume
      description: |+
        Eradicate a volume that has been destroyed and is pending eradication.
        Eradicated volumes cannot be recovered.
        Volumes are destroyed through the `PATCH` method.
        The `ids` or `names` parameter is required, but they cannot be set together.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Ids'
      - $ref: '#/components/parameters/Names'
      responses:
        "200":
          description: OK
          content: {}
    patch:
      tags:
      - Volumes
      summary: Manage a volume
      description: |+
        Renames or destroys a volume.
        To rename a volume, set `name` to the new name.
        To move a volume, set the `pod` or `volume group` parameters.
        To destroy a volume, set `destroyed=true`.
        To recover a volume that has been destroyed and is pending eradication, set
        `destroyed=false`.
        Sets the bandwidth and IOPs limits of a volume group.
        The `ids` or `names` parameter is required, but they cannot be set together.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Ids'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Truncate'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolumePatch'
        required: true
        x-codegen-request-body-name: volume
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeResponse'
      x-codegen-request-body-name: volume
  /api/2.0/volumes/performance:
    get:
      tags:
      - Volumes
      summary: List volume performance data
      description: |+
        Returns real-time and historical performance data,
        real-time latency data, and
        average I/O sizes for each volume and
        and as a total of all volumes across the entire array.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Destroyed'
      - $ref: '#/components/parameters/History_end_time'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Ids'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/History_resolution'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/History_start_time'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Total_only'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePerformanceGetResponse'
  /api/2.0/volumes/performance/by-array:
    get:
      tags:
      - Volumes
      summary: List volume performance data by array
      description: |+
        Returns real-time and historical performance data, real-time latency data,
        and average I/O size data.
        The data returned is for each volume on the current array and for each volume
        on any remote arrays that are visible to the current array.
        The data is grouped by individual volumes
        and as a total across all volumes on each array.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Destroyed'
      - $ref: '#/components/parameters/History_end_time'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Ids'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/History_resolution'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/History_start_time'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Total_only'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePerformanceByArrayGetResponse'
  /api/2.0/volumes/space:
    get:
      tags:
      - Volumes
      summary: List volume space information
      description: |+
        Return provisioned size and physical storage consumption data
        for each volume.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Destroyed'
      - $ref: '#/components/parameters/History_end_time'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Ids'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/History_resolution'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/History_start_time'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Total_only'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSpaceGetResponse'
  /api/2.0/volume-snapshots:
    get:
      tags:
      - Volume Snapshots
      summary: List volume snapshots
      description: |+
        Return a list of volume snapshots, including those pending eradication.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Destroyed'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Ids'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Source_ids'
      - $ref: '#/components/parameters/Source_names'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Total_only'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeSnapshotGetResponse'
    post:
      tags:
      - Volume Snapshots
      summary: Generate a volume snapshot
      description: |+
        Create a point-in-time snapshot of the contents of a volume.
        The `source_ids` or `source_names` parameter is required, but they cannot be set together.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/OnSingle'
      - $ref: '#/components/parameters/Source_ids'
      - $ref: '#/components/parameters/Source_names'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolumeSnapshotPost'
        required: true
        x-codegen-request-body-name: volume-snapshot
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeSnapshotResponse'
      x-codegen-request-body-name: volume-snapshot
    delete:
      tags:
      - Volume Snapshots
      summary: Eradicate a volume snapshot
      description: |+
        Eradicate a volume snapshot that has been destroyed and is pending eradication.
        Eradicated volumes snapshots cannot be recovered.
        Volume snapshots are destroyed through the `PATCH` method.
        The `ids` or `names` parameter is required, but they cannot be set together.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Ids'
      - $ref: '#/components/parameters/Names'
      responses:
        "200":
          description: OK
          content: {}
    patch:
      tags:
      - Volume Snapshots
      summary: Manage a volume snapshot
      description: |+
        Rename, destroy, or recover a volume snapshot.
        To rename the suffix of a volume snapshot, set `name` to the new suffix name.
        To recover a volume snapshot that has been destroyed and is pending eradication,
        set `destroyed=true`.
        The `ids` or `names` parameter is required, but they cannot be set together.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Ids'
      - $ref: '#/components/parameters/Names'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolumeSnapshotPatch'
        required: true
        x-codegen-request-body-name: volume-snapshot
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeSnapshotResponse'
      x-codegen-request-body-name: volume-snapshot
  /api/2.0/volume-snapshots/transfer:
    get:
      tags:
      - Volume Snapshots
      summary: List volume snapshots with transfer statistics
      description: |+
        Returns a list of volume snapshots and their transfer statistics.

      parameters:
      - $ref: '#/components/parameters/Authorization'
      - $ref: '#/components/parameters/XRequestId'
      - $ref: '#/components/parameters/Destroyed'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/Ids'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Names'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/Source_ids'
      - $ref: '#/components/parameters/Source_names'
      - $ref: '#/components/parameters/Total_item_count'
      - $ref: '#/components/parameters/Total_only'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeSnapshotTransferGetResponse'
components:
  schemas:
    OauthGrantType:
      type: string
      description: |
        The method by which the access token will be obtained.
        The Pure Storage REST API supports the OAuth 2.0 "token exchange" grant type,
        which indicates that a token exchange is being performed.
        Set `grant_type` to `urn:ietf:params:oauth:grant-type:token-exchange`.
      default: urn:ietf:params:oauth:grant-type:token-exchange
    OauthSubjectToken:
      type: string
      description: |+
        An encoded security ID Token representing the identity of the party on behalf of
        whom the request is being made. The token must be issued by a trusted
        identity provider which must be either a registered application in Pure1
        or an enabled API client on the array. The token must be a JSON Web Token
        and must contain the following claims:

        > | JWT claim | Location | API Client Field | Description | Required By |

        > |-|-|-|-|-|

        > | kid | Header | key_id | Key ID of the API client that issues the identity token. | FlashArray
        and FlashBlade only. |

        > | aud | Payload | id | Client ID of the API client that issues the identity token. | FlashArray
        and FlashBlade only. |

        > | sub | Payload | | Login name of the array user for whom the token should be issued.
        This must be a valid user in the system. | FlashArray and FlashBlade only. |

        > | iss | Payload | issuer | Application ID for the Pure1 or API client's trusted identity
        issuer on the array. | All products. |

        > | iat | Payload | | Timestamp of when the identity token was issued.
        Measured in milliseconds since the UNIX epoch. | All products. |

        > | exp | Payload | | Timestamp of when the identity token will expire.
        Measured in milliseconds since the UNIX epoch. | All products. |


        Each token must also be signed with the private key that is paired with the
        API client's public key.

    OauthSubjectTokenType:
      type: string
      description: |
        An identifier that indicates the type of security token specifed in the `subject_token` parameter.
        The Pure Storage REST API supports the JSON Web Token (JWT)
        as the means for requesting the access token.
        Set `subject_token_type` to `urn:ietf:params:oauth:token-type:jwt`.
      default: urn:ietf:params:oauth:token-type:jwt
    Connection:
      type: object
      properties:
        host:
          description: The host computer that sends and receives I/O requests to and from volumes on the
            FlashArray array.
          title: FixedReferenceNoId
          allOf:
          - $ref: '#/components/schemas/_fixedReferenceNoId'
        host_group:
          description: A virtual collection of hosts with common connectivity to volumes.
          title: FixedReferenceNoId
          allOf:
          - $ref: '#/components/schemas/_fixedReferenceNoId'
        lun:
          description: |
            The logical unit number (LUN) by which the specified hosts are to
            address the specified volume. LUN can be in one of two formats: a simple
            LUN, or a LUN and Sublun with virtual volumes. A LUN and Sublun are
            integers in the range of 1 to 4095.

            The first format is simply the LUN number. The second format is a single
            int64 combining both ((LUN << 32) + Sublun) or (LUN * 4294967296 + Sublun).

            In the FA UI, a combined LUN and Sublun is represented as "LUN:Sublun".
            Example: LUN = 30, Sublun = 2, LUN:Sublun = 30:2
            Combined: (30 * 4294967296 + 2) == 128849018882.
            In REST it will be returned as 128849018882.

            To automatically assign a LUN to a private connection, the system starts
            at LUN '1' and counts up to the maximum LUN '4095', assigning the first
            available LUN to the connection. For shared connections, the system starts
            at LUN '254' and counts down to the minimum LUN '1', assigning the first
            available LUN to the connection. If all LUNs in the '[1...254]' range are
            taken, the system starts at LUN '255' and counts up to the maximum LUN
            '4095', assigning the first available LUN to the connection. The maximum
            int64 LUN:Sublun value is 17587891081215.
          type: integer
          format: int64
          example: 7
        protocol_endpoint:
          description: "A protocol endpoint (also known as a conglomerate volume) which acts as a proxy
            through which virtual volumes are created and then connected to VMware ESXi hosts or host
            groups. The protocol endpoint itself does not serve I/Os; instead, its job is to form connections
            between FlashArray volumes and ESXi hosts and host groups."
          title: Reference
          allOf:
          - $ref: '#/components/schemas/_reference'
        volume:
          description: A container that manages the storage space on the array.
          title: FixedReference
          allOf:
          - $ref: '#/components/schemas/_fixedReference'
    Host:
      allOf:
      - $ref: '#/components/schemas/_resourceNoId'
      - type: object
        properties:
          chap:
            $ref: '#/components/schemas/_chap'
          connection_count:
            description: The number of volumes connected to the specified host.
            type: integer
            format: int64
            readOnly: true
            example: 3
          host_group:
            description: The host group to which the host should be associated.
            title: ReferenceNoId
            allOf:
            - $ref: '#/components/schemas/_referenceNoId'
          iqns:
            description: |
              The iSCSI qualified name (IQN) associated with the host.
            type: array
            items:
              type: string
              example: iqn.2010-06.com.purestorage:linux.393d930077be2977
          nqns:
            description: The NVMe Qualified Name (NQN) associated with the host.
            type: array
            items:
              type: string
              example: nqn.2010-06.com.purestorage:flasharray.512f7bb185978505
          personality:
            description: |
              Determines how the system tunes the array to ensure that it works optimally with the host.
              Set `personality` to the name of the host operating system or virtual memory system.
              Valid values are `aix`, `esxi`, `hitachi-vsp`, `hpux`,
              `oracle-vm-server`, `solaris`, and `vms`.
              If your system is not listed as one of the valid host personalities, do not set the option.
              By default, the personality is not set.
            type: string
          port_connectivity:
            $ref: '#/components/schemas/_host_port_connectivity'
          preferred_arrays:
            description: |
              For synchronous replication configurations, sets a host's preferred array to specify which
              array exposes active/optimized paths to that host.
              Enter multiple preferred arrays in comma-separated format.
              If a preferred array is set for a host,
              then the other arrays in the same pod will expose active/non-optimized paths to that host.
              If the host is in a host group, `preferred_arrays` cannot be set because host groups
              have their own preferred arrays.
              On a preferred array of a certain host, all the paths on all the ports
              (for both the primary and secondary controllers) are set up as A/O (active/optimized) paths,
              while on a non-preferred array, all the paths are A/N (Active/Non-optimized) paths.
            type: array
            items:
              $ref: '#/components/schemas/_reference'
          space:
            description: |
              Displays provisioned size and physical storage consumption
              information for the sum of all volumes connected to the specified host.
            title: Space
            allOf:
            - $ref: '#/components/schemas/_space'
          wwns:
            description: The Fibre Channel World Wide Name (WWN) associated with the host.
            type: array
            items:
              type: string
              example: 52:4A:93:70:4E:E5:68:00
    ResourcePerformance:
      allOf:
      - $ref: '#/components/schemas/_resource'
      - $ref: '#/components/schemas/_performance'
    ResourcePerformanceByArray:
      allOf:
      - $ref: '#/components/schemas/ResourcePerformance'
      - type: object
        properties:
          array:
            description: |
              The array on which the performance metrics were recorded.
            title: Resource
            allOf:
            - $ref: '#/components/schemas/_resource'
    HostGroup:
      allOf:
      - $ref: '#/components/schemas/_resourceNoId'
      - type: object
        properties:
          connection_count:
            description: The number of volumes connected to the host group.
            type: integer
            format: int64
            readOnly: true
            example: 3
          host_count:
            description: The number of hosts in the host group.
            type: integer
            format: int64
            readOnly: true
            example: 3
          is_local:
            description: Returns a value of `true` if the host or host group belongs to the current array.
              Returns a value of `false` if the host or host group belongs to a remote array.
            type: boolean
            readOnly: true
          space:
            description: |
              Displays size and space consumption information.
            title: Space
            allOf:
            - $ref: '#/components/schemas/_space'
    Member:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/_reference'
        member:
          $ref: '#/components/schemas/_reference'
    MemberNoIdAll:
      type: object
      properties:
        group:
          description: "The resource in which the host, volume, or other item in the environment is a
            member."
          title: ReferenceNoId
          allOf:
          - $ref: '#/components/schemas/_referenceNoId'
        member:
          description: The member of the resource.
          title: ReferenceNoId
          allOf:
          - $ref: '#/components/schemas/_referenceNoId'
    Username:
      type: object
      properties:
        username:
          description: The username of the user.
          type: string
          example: pureuser
    Volume:
      allOf:
      - $ref: '#/components/schemas/_volumeCommon'
      - type: object
        properties:
          pod:
            description: A reference to the pod.
            title: Reference
            allOf:
            - $ref: '#/components/schemas/_reference'
          source:
            description: A reference to the originating volume as a result of a volume copy.
            title: FixedReference
            allOf:
            - $ref: '#/components/schemas/_fixedReference'
          subtype:
            description: |
              The type of volume.
              Valid values are `protocol_endpoint` and `regular`.
            type: string
            readOnly: true
          volume_group:
            description: A reference to the volume group.
            title: Reference
            allOf:
            - $ref: '#/components/schemas/_reference'
    VolumePerformance:
      allOf:
      - $ref: '#/components/schemas/_resource'
      - $ref: '#/components/schemas/_performance'
    VolumeSnapshot:
      allOf:
      - $ref: '#/components/schemas/_resource'
      - $ref: '#/components/schemas/_snapshot'
      - description: A point-in-time image of the contents of the volume.
        type: object
        properties:
          serial:
            description: |
              A serial number generated by the system when the snapshot is created.
              The serial number is unique across all arrays.
            type: string
            readOnly: true
          space:
            description: |
              Displays size and space consumption information.
            title: Space
            allOf:
            - $ref: '#/components/schemas/_space'
          volume_group:
            description: |
              The volume group to which the volume that is the source of this volume snapshot belongs.
            title: FixedReference
            allOf:
            - $ref: '#/components/schemas/_fixedReference'
    VolumeSnapshotTransfer:
      allOf:
      - $ref: '#/components/schemas/_resource'
      - $ref: '#/components/schemas/_transfer'
      - description: |
          Transfer statistics for snapshot replication.
        type: object
    ResourceSpace:
      allOf:
      - $ref: '#/components/schemas/_builtIn'
      - type: object
        properties:
          space:
            description: |
              Displays size and space consumption information.
            title: Space
            allOf:
            - $ref: '#/components/schemas/_space'
          time:
            description: |
              The timestamp of when the data was taken.
              Measured in milliseconds since the UNIX epoch.
            type: integer
            format: int64
            readOnly: true
        x-readOnly: true
    Api_versionResponse:
      type: object
      properties:
        version:
          description: A list of supported API versions.
          type: array
          items:
            type: string
          example:
          - "1.0"
          - "1.1"
          - "1.2"
          - "1.3"
          - "1.4"
          - "1.5"
          - "1.6"
          - "1.7"
          - "1.8"
          - "1.9"
          - "1.10"
          - "1.11"
          - "1.12"
          - "1.13"
          - "1.14"
          - "1.15"
          - "1.16"
          - "1.17"
          - "2.0"
    ConnectionPost:
      type: object
      properties:
        lun:
          description: |
            The logical unit number (LUN) by which the specified hosts
            are to address the specified volume. If the LUN is not specified,
            the system automatically assigns a LUN to the connection.
            To automatically assign a LUN to a private connection,
            the system starts at LUN `1` and counts up to the maximum LUN `4095`,
            assigning the first available LUN to the connection.
            For shared connections, the system starts at LUN `254` and
            counts down to the minimum LUN `1`, assigning the first available LUN
            to the connection. If all LUNs in the `[1...254]` range are taken,
            the system starts at LUN `255` and counts up to the maximum LUN `4095`,
            assigning the first available LUN to the connection.
          type: integer
          format: int32
          minimum: 1
          maximum: 4095
          example: 7
        protocol_endpoint:
          description: |
            A protocol endpoint (also known as a conglomerate volume) which acts as a proxy through which
            virtual volumes are created and then connected to VMware ESXi hosts or host groups.
            The protocol endpoint itself does not serve I/Os; instead,
            its job is to form connections between FlashArray volumes and ESXi hosts and host groups.
          title: Reference
          allOf:
          - $ref: '#/components/schemas/_reference'
    ConnectionGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - $ref: '#/components/schemas/ConnectionResponse'
    ConnectionResponse:
      type: object
      properties:
        items:
          description: |
            Returns a list of all items after filtering.
            The values are displayed for each name where meaningful.
            If `total_only=true`, the `items` list will be empty.
          type: array
          items:
            $ref: '#/components/schemas/Connection'
    HostGroupPatch:
      allOf:
      - $ref: '#/components/schemas/_newName'
    HostGroupGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - $ref: '#/components/schemas/HostGroupResponse'
    HostGroupResponse:
      type: object
      properties:
        items:
          description: |
            Returns a list of all items after filtering.
            The values are displayed for each name where meaningful.
          type: array
          items:
            $ref: '#/components/schemas/HostGroup'
    MemberNoIdAllGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - $ref: '#/components/schemas/MemberNoIdAllResponse'
    ResourcePerformanceNoIdGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - type: object
        properties:
          items:
            description: |
              Performance data.
              If `total_only=true`, the `items` list will be empty.
            type: array
            items:
              $ref: '#/components/schemas/ResourcePerformanceNoId'
          total:
            description: |
              The aggregate value of all items after filtering.
              Where it makes more sense, the average value is displayed instead.
              The values are displayed for each field where meaningful.
            type: array
            items:
              $ref: '#/components/schemas/ResourcePerformanceNoId'
    ResourcePerformanceNoIdByArrayGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - type: object
        properties:
          items:
            description: |
              Performance data, broken down by array.
              If `total_only=true`, the `items` list will be empty.
            type: array
            items:
              $ref: '#/components/schemas/ResourcePerformanceNoIdByArray'
          total:
            description: |
              The aggregate value of all items after filtering.
              Where it makes more sense, the average value is displayed instead.
              The values are displayed for each field where meaningful.
            type: array
            items:
              $ref: '#/components/schemas/ResourcePerformanceNoIdByArray'
    HostPost:
      type: object
      properties:
        chap:
          $ref: '#/components/schemas/_chap'
        iqns:
          description: |
            The iSCSI qualified name (IQN) associated with the host.
          type: array
          items:
            type: string
            example: iqn.2010-06.com.purestorage:linux.393d930077be2977
        nqns:
          description: The NVMe Qualified Name (NQN) associated with the host.
          type: array
          items:
            type: string
            example: nqn.2010-06.com.purestorage:flasharray.512f7bb185978505
        personality:
          description: |
            Determines how the system tunes the array to ensure that it works optimally with the host.
            Set `personality` to the name of the host operating system or virtual memory system.
            Valid values are `aix`, `esxi`, `hitachi-vsp`, `hpux`,
            `oracle-vm-server`, `solaris`, and `vms`.
            If your system is not listed as one of the valid host personalities, do not set the option.
            By default, the personality is not set.
          type: string
        preferred_arrays:
          description: |
            For synchronous replication configurations, sets a host's preferred array to specify which
            array exposes active/optimized paths to that host.
            Enter multiple preferred arrays in comma-separated format.
            If a preferred array is set for a host,
            then the other arrays in the same pod will expose active/non-optimized paths to that host.
            If the host is in a host group, `preferred_arrays` cannot be set because host groups
            have their own preferred arrays.
            On a preferred array of a certain host, all the paths on all the ports
            (for both the primary and secondary controllers) are set up as A/O (active/optimized) paths,
            while on a non-preferred array, all the paths are A/N (Active/Non-optimized) paths.
          type: array
          items:
            $ref: '#/components/schemas/_reference'
        wwns:
          description: The Fibre Channel World Wide Name (WWN) associated with the host.
          type: array
          items:
            type: string
            example: 52:4A:93:70:4E:E5:68:00
    HostPatch:
      allOf:
      - $ref: '#/components/schemas/_newName'
      - type: object
        properties:
          add_iqns:
            description: |
              Adds the specified iSCSI Qualified Names (IQNs)
              to those already associated with the specified host.
            type: array
            items:
              type: string
              description: IQNs to add.
              example: iqn.2010-06.com.purestorage:linux.393d930077be2977
          add_nqns:
            description: |
              Adds the specified NVMe Qualified Names (NQNs)
              to those already associated with the specified host.
            type: array
            items:
              type: string
              description: NQNs to add.
              example: nqn.2010-06.com.purestorage:flasharray.512f7bb185978505
          add_wwns:
            description: |
              Adds the specified Fibre Channel World Wide Names (WWNs)
              to those already associated with the specified host.
            type: array
            items:
              type: string
              description: WWNs to add.
              example: 52:4A:93:70:4E:E5:68:00
          chap:
            $ref: '#/components/schemas/_chap'
          host_group:
            description: The host group to which the host should be associated.
            title: ReferenceNoId
            allOf:
            - $ref: '#/components/schemas/_referenceNoId'
          iqns:
            description: |
              The iSCSI qualified name (IQN) associated with the host.
            type: array
            items:
              type: string
              example: iqn.2010-06.com.purestorage:linux.393d930077be2977
          nqns:
            description: The NVMe Qualified Name (NQN) associated with the host.
            type: array
            items:
              type: string
              example: nqn.2010-06.com.purestorage:flasharray.512f7bb185978505
          personality:
            description: |
              Determines how the system tunes the array to ensure that it works optimally with the host.
              Set `personality` to the name of the host operating system or virtual memory system.
              Valid values are `aix`, `esxi`, `hitachi-vsp`, `hpux`,
              `oracle-vm-server`, `solaris`, and `vms`.
              If your system is not listed as one of the valid host personalities, do not set the option.
              By default, the personality is not set.
            type: string
          preferred_arrays:
            description: |
              For synchronous replication configurations, sets a host's preferred array to specify which
              array exposes active/optimized paths to that host.
              Enter multiple preferred arrays in comma-separated format.
              If a preferred array is set for a host,
              then the other arrays in the same pod will expose active/non-optimized paths to that host.
              If the host is in a host group, `preferred_arrays` cannot be set because host groups
              have their own preferred arrays.
              On a preferred array of a certain host, all the paths on all the ports
              (for both the primary and secondary controllers) are set up as A/O (active/optimized) paths,
              while on a non-preferred array, all the paths are A/N (Active/Non-optimized) paths.
            type: array
            items:
              $ref: '#/components/schemas/_reference'
          remove_iqns:
            description: |
              Disassociates the specified iSCSI Qualified Names (IQNs) from the specified host.
            type: array
            items:
              type: string
              description: IQNs to remove.
              example: iqn.2010-06.com.purestorage:linux.393d930077be2977
          remove_nqns:
            description: |
              Disassociates the specified NVMe Qualified Names (NQNs) from the specified host.
            type: array
            items:
              type: string
              description: NQNs to remove.
              example: nqn.2010-06.com.purestorage:flasharray.512f7bb185978505
          remove_wwns:
            description: |
              Disassociates the specified Fibre Channel World Wide Names (WWNs) from the specified host.
            type: array
            items:
              type: string
              description: WWNs to remove.
              example: 52:4A:93:70:4E:E5:68:00
          wwns:
            description: The Fibre Channel World Wide Name (WWN) associated with the host.
            type: array
            items:
              type: string
              example: 52:4A:93:70:4E:E5:68:00
    HostGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - $ref: '#/components/schemas/HostResponse'
    HostResponse:
      type: object
      properties:
        items:
          description: |
            Returns a list of all items after filtering.
            The values are displayed for each name where meaningful.
            If `total_only=true`, the `items` list will be empty.
          type: array
          items:
            $ref: '#/components/schemas/Host'
    UsernameResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Username'
    VolumePost:
      allOf:
      - $ref: '#/components/schemas/_destroyedPatchPost'
      - type: object
        properties:
          provisioned:
            description: |
              Sets the virtual size of the volume. Measured in bytes.
            type: integer
            format: int64
            maximum: 4503599627370496
          qos:
            description: |
              Sets QoS limits.
            title: Qos
            allOf:
            - $ref: '#/components/schemas/_qos'
          source:
            description: The source volume of a volume copy.
            title: Reference
            allOf:
            - $ref: '#/components/schemas/_reference'
          subtype:
            description: |
              The type of volume.
              Valid values are `protocol_endpoint` and `regular`.
            type: string
    VolumePatch:
      allOf:
      - $ref: '#/components/schemas/_destroyedPatchPost'
      - $ref: '#/components/schemas/_newName'
      - type: object
        properties:
          pod:
            description: Moves the volume into the specified pod.
            title: Reference
            allOf:
            - $ref: '#/components/schemas/_reference'
          provisioned:
            description: |
              Updates the virtual size of the volume. Measured in bytes.
            type: integer
            format: int64
            maximum: 4503599627370496
          qos:
            description: |
              Sets QoS limits.
            title: Qos
            allOf:
            - $ref: '#/components/schemas/_qos'
          volume_group:
            description: Adds the volume to the specified volume group.
            title: Reference
            allOf:
            - $ref: '#/components/schemas/_reference'
    VolumeGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - $ref: '#/components/schemas/VolumeResponse'
      - type: object
        properties:
          total:
            description: |
              The aggregate value of all items after filtering.
              Where it makes more sense, the average value is displayed instead.
              The values are displayed for each field where meaningful.
            type: array
            items:
              $ref: '#/components/schemas/Volume'
    VolumeResponse:
      type: object
      properties:
        items:
          description: |
            Returns a list of all items after filtering.
            The values are displayed for each name where meaningful.
            If `total_only=true`, the `items` list will be empty.
          type: array
          items:
            $ref: '#/components/schemas/Volume'
    ResourcePerformanceGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - type: object
        properties:
          items:
            description: |
              Performance data.
              If `total_only=true`, the `items` list will be empty.
            type: array
            items:
              $ref: '#/components/schemas/ResourcePerformance'
          total:
            description: |
              The aggregate value of all items after filtering.
              Where it makes more sense, the average value is displayed instead.
              The values are displayed for each field where meaningful.
            type: array
            items:
              $ref: '#/components/schemas/ResourcePerformance'
    ResourcePerformanceByArrayGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - type: object
        properties:
          items:
            description: |
              Performance data, broken down by array.
              If `total_only=true`, the `items` list will be empty.
            type: array
            items:
              $ref: '#/components/schemas/ResourcePerformanceByArray'
          total:
            description: |
              The aggregate value of all items after filtering.
              Where it makes more sense, the average value is displayed instead.
              The values are displayed for each field where meaningful.
            type: array
            items:
              $ref: '#/components/schemas/ResourcePerformanceByArray'
    ResourceSpaceGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - type: object
        properties:
          items:
            description: |
              Returns a list of all items after filtering.
              The values are displayed for each name where meaningful.
              If `total_only=true`, the `items` list will be empty.
            type: array
            items:
              $ref: '#/components/schemas/ResourceSpace'
          total:
            description: |
              The aggregate value of all items after filtering.
              Where it makes more sense, the average value is displayed instead.
              The values are displayed for each field where meaningful.
            type: array
            items:
              $ref: '#/components/schemas/ResourceSpace'
    VolumeSnapshotPost:
      allOf:
      - $ref: '#/components/schemas/_destroyedPatchPost'
      - type: object
        properties:
          suffix:
            description: |
              The suffix that is appended to the `source_name` value to generate the
              full volume snapshot name in the form `VOL.SUFFIX`.
              If the suffix is not specified, the system constructs the snapshot name
              in the form `VOL.NNN`, where `VOL` is the volume name, and `NNN` is a
              monotonically increasing number.
            type: string
    VolumeSnapshotPatch:
      allOf:
      - $ref: '#/components/schemas/_destroyedPatchPost'
      - $ref: '#/components/schemas/_newName'
    VolumeSnapshotGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - $ref: '#/components/schemas/VolumeSnapshotResponse'
      - type: object
        properties:
          total:
            description: |
              The aggregate value of all items after filtering.
              Where it makes more sense, the average value is displayed instead.
              The values are displayed for each field where meaningful.
            type: array
            items:
              $ref: '#/components/schemas/VolumeSnapshot'
    VolumeSnapshotResponse:
      type: object
      properties:
        items:
          description: |
            Returns a list of all items after filtering.
            The values are displayed for each name where meaningful.
            If `total_only=true`, the `items` list will be empty.
          type: array
          items:
            $ref: '#/components/schemas/VolumeSnapshot'
    VolumeSnapshotTransferGetResponse:
      allOf:
      - $ref: '#/components/schemas/PageInfo'
      - $ref: '#/components/schemas/VolumeSnapshotTransferResponse'
      - type: object
        properties:
          total:
            description: |
              The aggregate value of all items after filtering.
              Where it makes more sense, the average value is displayed instead.
              The values are displayed for each field where meaningful.
            type: array
            items:
              $ref: '#/components/schemas/VolumeSnapshotTransfer'
    _fixedReferenceNoId:
      type: object
      properties:
        name:
          description: |
            The resource name,
            such as volume name, pod name, snapshot name, and so on.
          type: string
          readOnly: true
      x-readOnly: true
    _reference:
      type: object
      properties:
        id:
          description: |
            A globally unique, system-generated ID.
            The ID cannot be modified.
          type: string
        name:
          description: |
            The resource name,
            such as volume name, pod name, snapshot name, and so on.
          type: string
    _fixedReference:
      type: object
      properties:
        id:
          description: |
            A globally unique, system-generated ID.
            The ID cannot be modified.
          type: string
          readOnly: true
        name:
          description: |
            The resource name,
            such as volume name, pod name, snapshot name, and so on.
          type: string
          readOnly: true
      x-readOnly: true
    _resourceNoId:
      description: |
        An ordinary (as opposed to built-in) resource that can be created, named,
        renamed or deleted by the user. This might be a virtual resource (e.g., a
        volume), or correspond to something in the environment, like a host or a
        server.
      type: object
      properties:
        name:
          description: |
            A user-specified name.
            The name must be locally unique and can be changed.
          type: string
    _chap:
      description: Challenge-Handshake Authentication Protocol (CHAP).
      type: object
      properties:
        host_password:
          description: |
            The host password for CHAP authentication.
            The password must be between 12 and 255 characters (inclusive)
            and cannot be the same as the target password.
          type: string
        host_user:
          description: The host username for CHAP authentication.
          type: string
        target_password:
          description: |
            The target password for CHAP authentication.
            The password must be between 12 and 255 characters (inclusive)
            and cannot be the same as the host password.
          type: string
        target_user:
          description: The target username for CHAP authentication.
          type: string
    _host_port_connectivity:
      description: |
        The connectivity status between the host and the ports on each controller.
      type: object
      properties:
        details:
          description: |
            The host connection status.
            Values include `Redundant`, `N/A`,
            `Redundant-Failover`, `Uneven`, `Unused Port`,
            `Single Controller`, `Single Controller-Failover`, and `None`.
          type: string
          readOnly: true
          example: Redundant
        status:
          description: |
            The host connection health status.
            Values include `healthy`, `unhealthy`, and `critical`.
          type: string
          readOnly: true
          example: healthy
      x-readOnly: true
    _referenceNoId:
      type: object
      properties:
        name:
          description: |
            The resource name, such as volume name, pod name, snapshot name, and so on.
          type: string
    _space:
      type: object
      properties:
        data_reduction:
          description: |
            The ratio of mapped sectors within a volume versus
            the amount of physical space the data occupies after data compression and deduplication.
            The data reduction ratio does not include thin provisioning savings.
            For example, a data reduction ratio of 5&#58;1 means that
            for every 5 MB the host writes to the array, 1 MB is stored on the array's flash modules.
          type: number
          format: float
          readOnly: true
        shared:
          description: |
            The physical space occupied by deduplicated data, meaning that the space is shared with other
            volumes and snapshots as a result of data deduplication.
            Measured in bytes.
            On Evergreen//One arrays, this is the effective space contributed by data that is not unique
            to a specific volume, managed directory, or snapshot, measured in bytes.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
          example: 111863360624
        snapshots:
          description: |
            The physical space occupied by data unique to one or more snapshots.
            Measured in bytes.
            On Evergreen//One arrays, this is the effective space contributed by data unique to one or
            more snapshots, measured in bytes.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        system:
          description: |
            The physical space occupied by internal array metadata. Measured in bytes.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        thin_provisioning:
          description: |
            The percentage of volume sectors that do not contain host-written data
            because the hosts have not written data to them or the sectors have been explicitly trimmed.
          type: number
          format: float
          minimum: 0
          maximum: 1
          readOnly: true
        total_physical:
          description: |
            The total physical space occupied by system, shared space, volume, and snapshot data.
            Measured in bytes.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        total_provisioned:
          description: |
            For a single volume, the provisioned size of the volume.
            For all other resources, the total provisioned size of all volumes
            that are connected to or are inside the resource.
            Represents storage capacity reported to hosts.
            Measured in bytes.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
          example: 19937690345472
        total_reduction:
          description: |+
            The ratio of provisioned sectors within a volume versus
            the amount of physical space the data occupies
            after reduction via data compression and deduplication
            and with thin provisioning savings.
            Total reduction is data reduction with thin provisioning savings.
            For example, a total reduction ratio of 10&#58;1 means that
            for every 10 MB of provisioned space,
            1 MB is stored on the array's flash modules.

          type: number
          format: float
          readOnly: true
        unique:
          description: |
            The unique physical space occupied by customer data.
            Unique physical space does not include shared space, snapshots, and internal array metadata.
            Measured in bytes.
            On Evergreen//One arrays, this is the effective space contributed by unique customer data,
            measured in bytes.
            Unique data does not include shared space, snapshots, and internal array metadata.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        virtual:
          description: |
            The amount of logically written data that a volume or a snapshot references.
            Measured in bytes.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
    _resource:
      description: |
        An ordinary (as opposed to built-in) resource that can be created, named,
        renamed or deleted by the user. This might be a virtual resource (e.g., a
        volume), or correspond to something in the environment, like a host or a
        server.
      type: object
      properties:
        id:
          description: |
            A globally unique, system-generated ID.
            The ID cannot be modified and cannot refer to another resource.
          type: string
          readOnly: true
        name:
          description: |
            A user-specified name.
            The name must be locally unique and can be changed.
          type: string
    _performance:
      type: object
      properties:
        bytes_per_mirrored_write:
          description: |
            The average I/O size per mirrored write, measured in bytes.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        bytes_per_op:
          description: |
            The average I/O size for both read and write (all) operations.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        bytes_per_read:
          description: "The average I/O size per read, measured in bytes."
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        bytes_per_write:
          description: "The average I/O size per write, measured in bytes."
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        mirrored_write_bytes_per_sec:
          description: |
            The number of mirrored bytes written per second.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        mirrored_writes_per_sec:
          description: |
            The number of mirrored writes per second.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        qos_rate_limit_usec_per_mirrored_write_op:
          description: |
            The average time it takes the array to process a mirrored I/O write request,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        qos_rate_limit_usec_per_read_op:
          description: |
            The average time spent waiting due to QoS rate limiting for a read request,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        qos_rate_limit_usec_per_write_op:
          description: |
            The average time that a write I/O request spends waiting
            as a result of the volume reaching its QoS bandwidth limit,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        queue_usec_per_mirrored_write_op:
          description: |
            The average time that a mirrored write I/O request spends in the array waiting to be served,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        queue_usec_per_read_op:
          description: |
            The average time that a read I/O request spends in the array waiting to be served,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        queue_usec_per_write_op:
          description: |
            The average time that a write I/O request spends in the array waiting to be served,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        read_bytes_per_sec:
          description: The number of bytes read per second.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        reads_per_sec:
          description: The number of read requests processed per second.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        san_usec_per_mirrored_write_op:
          description: |
            The average time required to transfer data
            from the initiator to the array for a mirrored write request,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        san_usec_per_read_op:
          description: |
            The average time required to transfer data from the array to the initiator for a read request,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        san_usec_per_write_op:
          description: |
            The average time required to transfer data
            from the initiator to the array for a write request,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        service_usec_per_mirrored_write_op:
          description: |
            The average time required for the array to service a mirrored write request,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        service_usec_per_read_op:
          description: |
            The average time required for the array to service a read request,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        service_usec_per_write_op:
          description: |
            The average time required for the array to service a write request,
            measured in microseconds.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        time:
          description: |
            The time when the sample performance data was taken,
            measured in milliseconds since the UNIX epoch.
          type: integer
          format: int64
          readOnly: true
        usec_per_mirrored_write_op:
          description: |
            The average time it takes the array to process a mirrored I/O write request,
            measured in microseconds.
            Beginning in Purity 6.3.14 and 6.4.10 and later,
            including later major versions (6.5.x, 6.6.x and beyond),
            queue time is included.
            The average time does not include SAN time or QoS rate limit time.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        usec_per_read_op:
          description: |
            The average time it takes the array to process an I/O read request,
            measured in microseconds.
            Beginning in Purity 6.3.14 and 6.4.10 and later,
            including later major versions (6.5.x, 6.6.x and beyond),
            queue time is included.
            The average time does not include SAN time or QoS rate limit time.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        usec_per_write_op:
          description: |
            The average time it takes the array to process an I/O write request,
            measured in microseconds.
            Beginning in Purity 6.3.14 and 6.4.10 and later,
            including later major versions (6.5.x, 6.6.x and beyond),
            queue time is included.
            The average time does not include SAN time or QoS rate limit time.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        write_bytes_per_sec:
          description: The number of bytes written per second.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        writes_per_sec:
          description: The number of write requests processed per second.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
      x-readOnly: true
    _volumeCommon:
      allOf:
      - $ref: '#/components/schemas/_resource'
      - description: |
          A disk-like random access virtual storage device that a FlashArray
          system exports to hosts via a logical unit number (LUN). To a host,
          a volume contains a number of 512-byte sectors in which data can be
          written and from which it can be read.
        type: object
        properties:
          connection_count:
            description: |
              The total number of hosts and host groups connected to the volume.
            type: integer
            format: int64
            readOnly: true
          created:
            description: The volume creation time. Measured in milliseconds since the UNIX epoch.
            type: integer
            format: int64
            readOnly: true
          destroyed:
            description: |
              Returns a value of `true` if the volume has been destroyed and is pending eradication.
              The `time_remaining` value displays the amount of time left
              until the destroyed volume is permanently eradicated.
              Before the `time_remaining` period has elapsed, the destroyed volume can be recovered
              by setting `destroyed=false`.
              Once the `time_remaining` period has elapsed,
              the volume is permanently eradicated and can no longer be recovered.
            type: boolean
          host_encryption_key_status:
            description: |
              The host encryption key status for this volume.
              Possible values include `none`, `detected`, and `fetched`.
            type: string
            readOnly: true
            example: detected
          provisioned:
            description: |
              The virtual size of the volume. Measured in bytes
              and must be a multiple of 512. The maximum size is
              4503599627370496 (4PB)
            type: integer
            format: int64
          qos:
            description: |
              Displays QoS limit information.
            title: Qos
            allOf:
            - $ref: '#/components/schemas/_qos'
          serial:
            description: |
              A globally unique serial number generated by the system when the volume is created.
            type: string
            readOnly: true
          space:
            description: |
              Displays size and space consumption information.
            title: Space
            allOf:
            - $ref: '#/components/schemas/_space'
          time_remaining:
            description: |
              The amount of time left until the destroyed volume is permanently eradicated.
              Measured in milliseconds.
              Before the `time_remaining` period has elapsed, the destroyed volume can be recovered
              by setting `destroyed=false`.
            type: integer
            format: int64
            readOnly: true
    _snapshot:
      type: object
      properties:
        created:
          description: |
            The snapshot creation time. Measured in milliseconds since the UNIX epoch.
          type: integer
          format: int64
          readOnly: true
        destroyed:
          description: |
            Returns a value of `true` if the snapshot has been destroyed and is pending eradication.
            The `time_remaining` value displays the amount of time left
            until the destroyed volume snapshot is permanently eradicated.
            Before the `time_remaining` period has elapsed, the destroyed volume snapshot can be recovered
            by setting `destroyed=false`.
            Once the `time_remaining` period has elapsed,
            the volume snapshot is permanently eradicated and can no longer be recovered.
          type: boolean
        pod:
          description: |
            A reference to the pod.
          title: FixedReference
          allOf:
          - $ref: '#/components/schemas/_fixedReference'
        provisioned:
          description: |
            The provisioned space of the snapshot. Measured in bytes. The minimum size is 1048576 (1MB),
            the maximum size is 4503599627370496 (4PB)
          type: integer
          format: int64
          readOnly: true
        source:
          description: |
            The volume from which this snapshot was taken.
            For a replicated snapshot being viewed on the target side, the
            `source` is the replica volume.
          title: FixedReference
          allOf:
          - $ref: '#/components/schemas/_fixedReference'
        suffix:
          description: |
            The suffix that is appended to the `source_name` value to generate the full
            volume snapshot name in the form `VOL.SUFFIX`.
            If the suffix is not specified, the system constructs the snapshot name in the form `VOL.NNN`,
            where `VOL` is the volume name, and `NNN` is a monotonically increasing number.
          type: string
        time_remaining:
          description: |
            The amount of time left until the destroyed snapshot is permanently eradicated.
            Measured in milliseconds.
            Before the `time_remaining` period has elapsed, the destroyed snapshot can be recovered
            by setting `destroyed=false`.
          type: integer
          format: int64
          readOnly: true
    _transfer:
      type: object
      properties:
        completed:
          description: |
            The timestamp of when the snapshot replication process completed.
            Measured in milliseconds since since the UNIX epoch.
          type: integer
          format: int64
          readOnly: true
        data_transferred:
          description: |
            The number of bytes transferred from the source array to the target as part of
            the replication process.
            The data transferred amount is calculated as the size difference between the
            current and previous snapshots after data reduction.
            Measured in bytes.
          type: integer
          format: int64
          readOnly: true
        physical_bytes_written:
          description: |
            The amount of data persisted on the target due to replication. Measured in bytes.
          type: integer
          format: int64
          readOnly: true
        progress:
          description: |
            The percentage progress of the snapshot transfer from the source array to the target.
            Displayed in decimal format.
          type: number
          format: float
          readOnly: true
          example: 0.66
        started:
          description: |
            The timestamp of when the snapshot replication process started.
            Measured in milliseconds since the UNIX epoch.
          type: integer
          format: int64
          readOnly: true
    _builtIn:
      description: |
        A built-in resource. Many are singletons predefined by Purity (e.g., support
        settings). Some correspond to a piece of software, like an app, or hardware,
        like a controller. Others are created by the system in response to some event
        (e.g., alerts, audit records).

        Typically, a user can't create, delete or rename a built-in resource. A few
        can be created or deleted, but not renamed because the names are meaningful
        to Purity (e.g., VIFs).
      type: object
      properties:
        id:
          description: |
            A globally unique, system-generated ID.
            The ID cannot be modified and cannot refer to another resource.
          type: string
          readOnly: true
        name:
          description: |
            A locally unique, system-generated name. The name cannot be modified.
          type: string
          readOnly: true
    PageInfo:
      type: object
      properties:
        more_items_remaining:
          description: |
            Returns a value of `true` if subsequent items can be retrieved.
          type: boolean
          example: false
        total_item_count:
          description: |
            The total number of records after applying all filter query parameters.
            The `total_item_count` will be calculated if and only if the corresponding
            query parameter `total_item_count` is set to `true`. If this query parameter
            is not set or set to `false`, a value of `null` will be returned.
          type: integer
          format: int32
    _newName:
      type: object
      properties:
        name:
          description: The new name for the resource.
          type: string
    MemberNoIdAllResponse:
      type: object
      properties:
        items:
          description: |
            Returns a list of all items after filtering.
            The values are displayed for each name where meaningful.
          type: array
          items:
            $ref: '#/components/schemas/MemberNoIdAll'
    ResourcePerformanceNoId:
      allOf:
      - $ref: '#/components/schemas/_resourceNoId'
      - $ref: '#/components/schemas/_performance'
    ResourcePerformanceNoIdByArray:
      allOf:
      - $ref: '#/components/schemas/ResourcePerformanceNoId'
      - type: object
        properties:
          array:
            description: |
              The array on which the performance metrics were recorded.
            title: Resource
            allOf:
            - $ref: '#/components/schemas/_resource'
    _destroyedPatchPost:
      type: object
      properties:
        destroyed:
          description: |
            If set to `true`, destroys a resource. Once set to `true`,
            the `time_remaining` value will display the amount of time left
            until the destroyed resource is permanently eradicated.
            Before the `time_remaining` period has elapsed, the destroyed resource
            can be recovered by setting `destroyed=false`.
            Once the `time_remaining` period has elapsed,
            the resource is permanently eradicated and can no longer be recovered.
          type: boolean
    _qos:
      type: object
      properties:
        bandwidth_limit:
          description: |
            The maximum QoS bandwidth limit for the volume.
            Whenever throughput exceeds the bandwidth limit, throttling occurs.
            Measured in bytes per second. Maximum limit is 512 GB/s.
          type: integer
          format: int64
          minimum: 1048576
          maximum: 549755813888
        iops_limit:
          description: |
            The QoS IOPs limit for the volume.
          type: integer
          format: int64
          minimum: 100
          maximum: 100000000
    VolumeSnapshotTransferResponse:
      type: object
      properties:
        items:
          description: |
            Returns a list of all items after filtering.
            The values are displayed for each name where meaningful.
            If `total_only=true`, the `items` list will be empty.
          type: array
          items:
            $ref: '#/components/schemas/VolumeSnapshotTransfer'
  responses:
    OauthToken200:
      description: OK
      content:
        application/json:
          schema:
            title: oauth_token_response
            type: object
            properties:
              access_token:
                description: |
                  The serialized OAuth 2.0 Bearer token used to perform authenticated requests.
                  The access token must be added to the Authorization header of all API calls.
                type: string
                example: "eyJraWQiOiJqTlBzL1Ria2c4U2Vua3F3ZmkvbnI4bWxxQ3NPIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiI5NDcyMTkwOC1mNzkyLTcxMmUtYTYzOS0wODM5ZmE4MzA5MjIiLCJzdWIiOiJqb2UiLCJyb2xlIjoic3RvcmFnZV9hZG1pbiIsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTAwMCIsImlhdCI6MTU0NDAzNjA1MiwiZXhwIjoxNTQ0MDcyMDUyLCJqdGkiOiJjOTg0MjgyNS1mNGM3LTRiNGUtODdkNy03OWFiZmIxYTUzNDgifQ.pnuYAx0CkmkIG0LDrMAQGRr5Ci4-t5yMto3A7BkmyKnAVHBXG5ZIWwvNkWDLhqbA4YjmG7LZmWHrCVehLy2zy2vRLahFURsd3GTnOaWSyWFIyrwpoO81jQRtOQATtseweuMT_-C8o3oa4MgBNBsuKrhwKQS3oDDpeRPaCRTGev1_xRDxh_K6CWJBTAeOP2pcR4LW6zIJkCLzzkMuyL4aTJWWUjSbl04mcFbyw8r8W1GURrmaDVOvvpT634Hk9-GGh9OMIRlS6OOq7cJKc-RRWn18IK2Gs53V_KYshXTBbnRr990Y_qOX8MaTWOJTqgzsojY02MSVuJ9XDJWoIU3TQytr4K1vM2EvwDZDgl7LuUYUn7vWhbKktFzpeZyyhOjq3eX-ViugYKpIjBcG2f_-fcTPceEWGV82rd6TyVNB5A-v9u2kxCdW198t_kesgVQfuupDeS02cZe0ABLCzEHPiVF17JfiVr6sjkciioxN7Wj_j18ga4U0mdSukauT8yhbgCW1ijTVTFu1VwWebW0s8z3BWMtXdTtZ3BhcZVAdKRF8bOq7nfEbUQGhTn9g7dK-yF050winjtp-VTL2oUtkF5j1v_N8vPNiN9ZdkGJZr7VVZ-qeOJZcjdaRbxL6YB__yT1wkTcKPh8RHz6GUq7Jbyw8VIlcBE2nvJ63d0tH9C4"
              expires_in:
                description: |
                  The duration after which the access token will expire.
                  Measured in seconds. This differs from other duration
                  fields that are expressed in milliseconds.
                type: integer
                format: uint32
                example: 35999
              issued_token_type:
                description: |
                  The type of token that is issued.
                  The Pure Storage REST API supports OAuth 2.0 access tokens.
                type: string
                example: urn:ietf:params:oauth:token-type:access_token
              token_type:
                description: |
                  Indicates how the API client can use the access token issued.
                  The Pure Storage REST API supports the `Bearer` token.
                type: string
                example: Bearer
    OauthToken400:
      description: BAD REQUEST
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: invalid_request
              error_description:
                type: string
                example: "Unsupported subject_token_type: urn:ietf:params:oauth:token-"
    OauthToken401:
      description: UNAUTHORIZED
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: invalid_client
              error_description:
                type: string
                example: "Invalid identity: JWT validation failed."
  parameters:
    XRequestId:
      name: X-Request-ID
      in: header
      description: |
        Supplied by client during request or generated by server.
      schema:
        type: string
    Authorization:
      name: Authorization
      in: header
      description: |
        Access token (in JWT format) required to use any API
        endpoint (except `/oauth2`, `/login`, and `/logout`)
      schema:
        type: string
    Filter:
      name: filter
      in: query
      description: |
        Narrows down the results to only the response objects
        that satisfy the filter criteria.
      schema:
        type: string
    Host_group_names:
      name: host_group_names
      in: query
      description: |
        Performs the operation on the host group specified.
        Enter multiple names in comma-separated format.
        A request cannot include a mix of multiple objects with multiple names.
        For example, a request cannot include a mix of multiple host group names and volume names;
        instead, at least one of the objects (e.g., `host_group_names`) must be set to only one name
        (e.g., `hgroup01`).
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Host_names:
      name: host_names
      in: query
      description: |
        Performs the operation on the hosts specified.
        Enter multiple names in comma-separated format.
        For example, `host01,host02`.
        A request cannot include a mix of multiple objects with multiple names.
        For example, a request cannot include a mix of multiple host names and volume names;
        instead, at least one of the objects (e.g., `host_names`) must be set to only one name
        (e.g., `host01`).
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Limit:
      name: limit
      in: query
      description: |
        Limits the size of the response to the specified number of objects on each page.
        To return the total number of resources, set `limit=0`.
        The total number of resources is returned as a `total_item_count` value.
        If the page size requested is larger than the system maximum limit,
        the server returns the maximum limit, disregarding the requested page size.
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 10
    Offset:
      name: offset
      in: query
      description: |
        The starting position based on the results of the query
        in relation to the full set of response objects returned.
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 10
    Protocol_endpoint_names:
      name: protocol_endpoint_names
      in: query
      description: |
        Performs the operation on the protocol endpoints specified.
        Enter multiple names in comma-separated format.
        For example, `pe01,pe02`.
        A request cannot include a mix of multiple objects with multiple names.
        For example, a request cannot include a mix of multiple protocol endpoint names and host names;
        instead, at least one of the objects (e.g., `protocol_endpoint_names`) must be set to one name
        (e.g., `pe01`).
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Sort:
      name: sort
      in: query
      description: |
        Returns the response objects in the order specified.
        Set `sort` to the name in the response by which to sort.
        Sorting can be performed on any of the names in the response,
        and the objects can be sorted in ascending or descending order.
        By default, the response objects are sorted in ascending order.
        To sort in descending order, append the minus sign (`-`) to the name.
        A single request can be sorted on multiple objects.
        For example, you can sort all volumes from largest to smallest volume size,
        and then sort volumes of the same size in ascending order by volume name.
        To sort on multiple names, list the names as comma-separated values.
      style: form
      explode: false
      schema:
        type: array
        items:
          pattern: "^[a-z]+(_[a-z]+)*-?"
          type: string
    Total_item_count:
      name: total_item_count
      in: query
      description: |
        If set to `true`, the `total_item_count` matching the
        specified query parameters is calculated and returned in
        the response. If set to `false`, the `total_item_count`
        is `null` in the response. This may speed up queries
        where the `total_item_count` is large. If not specified,
        defaults to `false`.
      schema:
        type: boolean
    Volume_names:
      name: volume_names
      in: query
      description: |
        Performs the operation on the volume specified.
        Enter multiple names in comma-separated format.
        For example, `vol01,vol02`.
        A request cannot include a mix of multiple objects with multiple names.
        For example, a request cannot include a mix of multiple volume names and host names;
        instead, at least one of the objects (e.g., `volume_names`) must be set to only one name
        (e.g., `vol01`).
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Names:
      name: names
      in: query
      description: |
        Performs the operation on the unique name specified.
        Enter multiple names in comma-separated format.
        For example, `name01,name02`.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Group_names:
      name: group_names
      in: query
      description: |+
        Performs the operation on the unique group name specified.
        Examples of groups include host groups, pods, protection groups, and volume groups.
        Enter multiple names in comma-separated format. For example, `hgroup01,hgroup02`.

      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Member_names:
      name: member_names
      in: query
      description: |
        Performs the operation on the unique member name specified.
        Examples of members include volumes, hosts, host groups, and directories.
        Enter multiple names in comma-separated format. For example, `vol01,vol02`.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Total_only:
      name: total_only
      in: query
      description: |
        If set to `true`, returns the aggregate value of all items after filtering.
        Where it makes more sense, the average value is displayed instead.
        The values are displayed for each name where meaningful.
        If `total_only=true`, the `items` list will be empty.
      schema:
        type: boolean
    Destroyed:
      name: destroyed
      in: query
      description: |
        If set to `true`, lists only destroyed objects
        that are in the eradication pending state.
        If set to `false`, lists only objects that are not destroyed.
        For destroyed objects, the time remaining is displayed in milliseconds.
      schema:
        type: boolean
    Ids:
      name: ids
      in: query
      description: |
        Performs the operation on the unique resource IDs specified.
        Enter multiple resource IDs in comma-separated format.
        The `ids` or `names` parameter is required, but they cannot be set together.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Overwrite:
      name: overwrite
      in: query
      description: |
        If set to `true`,
        overwrites an existing object during an object copy operation.
        If set to `false` or not set at all and the target name is an existing object,
        the copy operation fails.
        Required if the `source` body parameter is set
        and the source overwrites an existing object during the copy operation.
      schema:
        type: boolean
    Truncate:
      name: truncate
      in: query
      description: |
        If set to `true`, reduces the size of a volume
        during a volume resize operation.
        When a volume is truncated, Purity automatically takes an undo snapshot,
        providing a 24-hour window during which the previous contents
        can be retrieved. After truncating a volume,
        its provisioned size can be subsequently increased,
        but the data in truncated sectors cannot be retrieved.
        If set to `false` or not set at all and the volume is being reduced in size,
        the volume copy operation fails.
        Required if the `provisioned` parameter is set to a volume size
        that is smaller than the original size.
      schema:
        type: boolean
    History_end_time:
      name: end_time
      in: query
      description: |+
        Displays historical performance data for the specified time window,
        where `start_time` is the beginning of the time window,
        and `end_time` is the end of the time window.
        The `start_time` and `end_time` parameters
        are specified in milliseconds since the UNIX epoch.
        If `start_time` is not specified,
        the start time will default to one resolution before the end time,
        meaning that the most recent sample of performance data will be displayed.
        If `end_time`is not specified, the end time will default to the current time.
        Include the `resolution` parameter to display the performance data at the specified resolution.
        If not specified, `resolution` defaults to the lowest valid resolution.

      schema:
        type: integer
        format: int64
    History_resolution:
      name: resolution
      in: query
      description: |
        The number of milliseconds between samples of historical data.
        For array-wide performance metrics (`/arrays/performance` endpoint),
        valid values are `1000` (1 second), `30000` (30 seconds), `300000` (5 minutes),
        `1800000` (30 minutes), `7200000` (2 hours), `28800000` (8 hours), and `86400000` (24 hours).
        For performance metrics on storage objects (`<object name>/performance` endpoint),
        such as volumes,
        valid values are `30000` (30 seconds), `300000` (5 minutes), `1800000` (30 minutes),
        `7200000` (2 hours), `28800000` (8 hours), and `86400000` (24 hours).
        For space metrics, (`<object name>/space` endpoint),
        valid values are `300000` (5 minutes), `1800000` (30 minutes), `7200000` (2 hours),
        `28800000` (8 hours), and `86400000` (24 hours).
        Include the `start_time` parameter to display the performance data
        starting at the specified start time.
        If `start_time` is not specified,
        the start time will default to one resolution before the end time,
        meaning that the most recent sample of performance data will be displayed.
        Include the `end_time` parameter to display the performance data until the specified end time.
        If `end_time`is not specified, the end time will default to the current time.
        If the `resolution` parameter is not specified
        but either the `start_time` or `end_time` parameter is,
        then `resolution` will default to the lowest valid resolution.
      schema:
        type: integer
        format: int64
        minimum: 0
      example: 30000
    History_start_time:
      name: start_time
      in: query
      description: |+
        Displays historical performance data for the specified time window,
        where `start_time` is the beginning of the time window,
        and `end_time` is the end of the time window.
        The `start_time` and `end_time` parameters
        are specified in milliseconds since the UNIX epoch.
        If `start_time` is not specified,
        the start time will default to one resolution before the end time,
        meaning that the most recent sample of performance data will be displayed.
        If `end_time`is not specified, the end time will default to the current time.
        Include the `resolution` parameter to display the performance data at the specified resolution.
        If not specified, `resolution` defaults to the lowest valid resolution.

      schema:
        type: integer
        format: int64
    Source_ids:
      name: source_ids
      in: query
      description: |
        Performs the operation on the source ID specified.
        Enter multiple source IDs in comma-separated format.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Source_names:
      name: source_names
      in: query
      description: |
        Performs the operation on the source name specified.
        Enter multiple source names in comma-separated format. For example, `name01,name02`.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    OnSingle:
      name: "on"
      in: query
      description: |
        Performs the operation on the target name specified.
        For example, `targetName01`.
      schema:
        type: string
x-original-swagger-version: "2.0"
