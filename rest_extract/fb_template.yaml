---
info:
  description: |- 
    ## Pure Swagger UI for FlashBlade
    A light weight tool to explore the API for FlashBlade, community supported.  
    For help with this tool, use [Pure1 Community](https://community.purestorage.com/) or the [code-purestorage Slack](https://community.purestorage.com/discussion/9561/join-the-new-pure-code-slack-team-for-api-and-extensibility-discussions)
    
    ## Authentication
    Use an api-token (header param) to start a session at /api/login, that returns an x-auth-token header which expires in 30 minutes by default. This is
    different than FlashArray, which uses a cookie instead.  The x-auth-token is saved and added by the built in proxy server.
    
    Use "pureadmin create --api-token" on the CLI to create an API Token.  Or use "pureadmin list --api-token --expose" to show a token already created.  Note, it only shows tokens for user that is logged in.

    ## Proxy
    This Swagger tool includes a proxy server that forwards API calls to the array.  In the Swagger UI, you will \
    see curl API calls to IP 127.0.0.1, that is the proxy server. To see the API call details view the console output.

    ## Error Codes
    Use HTTP Response codes to determine command results.  Error message json formats are different depending on the endpoint.

    ## Official Documention
    Go to the Pure support portal for the [full documentation](https://support.purestorage.com/FlashBlade/Purity_FB/Purity%2F%2F%2F%2FFB_REST_API/Management_REST_API/Management_REST_API_Reference_Guides).

paths:
  /api/login:
    post:
      description: Create a new session with API_KEY
      responses:
        200:
          description: "User logged in"
          headers:
            x-auth-token:
              type: string
              description: authentication token, pass this back for future API Calls.
          schema:
            type: object
            properties:
              username:
                type: string
                description: The user name logged in.

            example: {"username":"pureuser"}
      tags: [Authorization]
      parameters:
        - in: header
          name: api-token
          type: string
          required: true
  /oauth2_pub_priv_key_pair:
    get:
      description: |-
        Returns a public and private key pair, This is not part of the FlashArray API, 
        it's a helper endpoint making it easier to generate an oauth2 token_id in this Swagger UI. 
        They keys are generated in the Docker container running on this machine.
        
        Recommend to NOT use this API but to use OpenSSL instead for production use cases:
          You can generate a public and private RSA key pair like this:

            openssl genrsa -des3 -out private.pem 2048
            
            That generates a 2048-bit RSA key pair, encrypts them with a password you provide and writes them to a file. 
            You need to next extract the public key file. You will use this, for instance, on your web server to encrypt 
            content so that it can only be read with the private key.
            
            Export the RSA Public Key to a File
            This is a command that is
            
            openssl rsa -in private.pem -outform PEM -pubout -out public.pem
      responses:
        200:
          description: "Token Generated"
          schema:
            type: object
            properties:
              private_key:
                type: string
                description: Private key in PEM format.
              public_key:
                  type: string
                  description: Public key in PEM format.
      tags: [Auth Helpers]
  /oauth2_token_from_private_key:
    post:
      consumes: 
        - "text/plain"
      produces:
        - "application/json"
      description: |-
        Authenticates to Flasharray, This returns a token_id (think session id), from an existing API Client, 
        This is not part of the FlashArray API, it's a helper endpoint making it easy to generate an 
        oauth2 token_id in this Swagger UI.  The private key is being passed into the Docker container in
        order to sign the JWT token.  Take a look at the Docker container output to see more details 
        of what is happening.

        Copy the output value, Authorization header, and then click on the green Authorize button at the 
        top of the page.  Paste in the value into 
      responses:
        200:
          description: "Token Generated"
          schema:
            type: object
            properties:
              Authorization:
                type: string
                description: An OAuth bearer token to be used in the Authorization header for authorization to API endpoints.
              description:
                type: string
                desciption: How to use token

            example: {"username":"pureuser"}
      tags: [Auth Helpers]
      parameters:
        - name: issuer_name
          in: header
          type: string
          description:  Issuer value displayed in the FlashArray API
                        Registration page or pureapiclient list ) by default it's the same name as API Client

        - name: client_id
          in: header
          type: string
          description:  Client Id value displayed in the FlashArray API
                        Registration page or pureapiclient list

        - name: key_id
          in: header
          type: string
          description:  Key Id value displayed in the FlashArray API
                        Registration page or pureapiclient list
      
        - name: username
          in: header
          type: string
          description:  The name of a valid user on the FlashArray that will be authenticated to.
    
        - name: private_key
          required: true
          in: body
          schema: 
            type: string
          description: Private key in PEM format that was used to create the Public key for this API Client specified as the issuer in this call.


tags:
  - name: Auth Helpers
    description: A set of endpoints not in the Purity API, but to make OAuth using this tool simple and easy to understand.

    