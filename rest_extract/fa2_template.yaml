---
openapi: "3.0.1"
info:
  title: Pure FlashArray API 2.0
  version: "1.0"
  description: |- 
    ## Pure Swagger UI for FlashArray
    A light weight tool to explore the API for FlashArray, community supported. 
    For  help with this tool, use [Pure1 Community](https://community.purestorage.com/) or the [code-purestorage Slack](https://community.purestorage.com/discussion/9561/join-the-new-pure-code-slack-team-for-api-and-extensibility-discussions)
    
    ## Authenticate using API Token
    To get an API Key, you can do POST /auth/apitoken with your user/pass using the 1.x API, then use your API key with POST /login.  The array returns 
    a header  with the name "x-auth-token".  This swagger UI tool, translates that into a cookie so the webbrowser will send on subsequent calls.  This Swagger UI tool then
    translates that cookie back into a header when making the API request to the array.

    ## Authenticate using OAuth
    ### Manually generate an id_token 
    
    ### 

    Intro to how OAuth2 works with the 2.0 version: [Intro](https://support.purestorage.com/FlashArray/PurityFA/Purity_FA_REST_API/Reference/REST_API_2.0_Authentication_Guide)

security:
- OAuth2-Bearer-Token: []
- X-Auth-Token: []


paths:
  /oauth2_pub_priv_key_pair:
    get:
      description: |-
        Returns a public and private key pair, This is not part of the FlashArray API, 
        it's a helper endpoint making it easier to generate an oauth2 token_id in this Swagger UI. 
        They keys are generated in the Docker container running on this machine.
        
        Recommend to NOT use this API but to use OpenSSL instead for production use cases:
          You can generate a public and private RSA key pair like this:

            openssl genrsa -des3 -out private.pem 2048
            
            That generates a 2048-bit RSA key pair, encrypts them with a password you provide and writes them to a file. 
            You need to next extract the public key file. You will use this, for instance, on your web server to encrypt 
            content so that it can only be read with the private key.
            
            Export the RSA Public Key to a File
            This is a command that is
            
            openssl rsa -in private.pem -outform PEM -pubout -out public.pem
      responses:
        "200":
          description: Token Generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  private_key:
                    type: string
                    description: Private key in PEM format.
                  public_key:
                    type: string
                    description: Public key in PEM format.
      tags: [Auth Helpers]
  /oauth2_token_from_private_key:
    post:
      description: |-
        Authenticates to Flasharray, This returns a token_id (think session id), from an existing API Client, 
        This is not part of the FlashArray API, it's a helper endpoint making it easy to generate an 
        oauth2 token_id in this Swagger UI.  The private key is being passed into the Docker container in
        order to sign the JWT token.  Take a look at the Docker container output to see more details 
        of what is happening.

        Copy the output value, Authorization header, and then click on the green Authorize button at the 
        top of the page.  Paste in the value into
      responses:
        "200":
          description: Token Generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  Authorization:
                    type: string
                    description: An OAuth bearer token to be used in the Authorization header for authorization to API endpoints.
                  description:
                    type: string
                    description: How to use token
                example: {"username":"pureuser"}
      x-codegen-request-body-name: private_key
      tags: [Auth Helpers]
      parameters:
        - name: issuer_name
          in: header
          schema:
            type: string
          description:  Issuer value displayed in the FlashArray API
                        Registration page or pureapiclient list ) by default it's the same name as API Client

        - name: client_id
          in: header
          schema:
            type: string
          description:  Client Id value displayed in the FlashArray API
                        Registration page or pureapiclient list

        - name: key_id
          in: header
          schema:
            type: string
          description:  Key Id value displayed in the FlashArray API
                        Registration page or pureapiclient list
      
        - name: username
          in: header
          schema:
            type: string
          description:  The name of a valid user on the FlashArray that will be authenticated to.
      requestBody:
        description: Private key in PEM format that was used to create the Public key for this API Client specified as the issuer in this call.
        content:
          text/plain:
            schema:
              type: string
        required: true
components:
  securitySchemes:
    OAuth2-Bearer-Token:
      type: apiKey
      name: Authorization
      in: header
    X-Auth-Token:
      type: apiKey
      name: x-auth-token
      in: header


tags:
  - name: Auth Helpers
    description: A set of endpoints not in the Purity API, but to make OAuth using this tool simple and easy to understand.

  
  
